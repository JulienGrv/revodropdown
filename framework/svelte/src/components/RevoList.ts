/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@revolist/revo-dropdown';


interface RevoListProps {
  
  /** Define object mapping for id/value */
  sourceItems?: Components.RevoList["sourceItems"]
  
  /**  */
  isFocused?: Components.RevoList["isFocused"]
  
  /** Define object mapping for labels */
  dataLabel?: Components.RevoList["dataLabel"]
}

interface RevoListEvents {
  
  /**  */
  doChange: Parameters<JSX.RevoList["onDoChange"]>[0]
}

interface RevoListSlots {
  default: any
}
  
/* generated by Svelte v3.31.2 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	init,
	insert,
	listen,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount } from "svelte";

function create_fragment(ctx) {
	let revo_list;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[9].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], null);

	return {
		c() {
			revo_list = element("revo-list");
			if (default_slot) default_slot.c();
			set_custom_element_data(revo_list, "is-focused", /*isFocused*/ ctx[0]);
			set_custom_element_data(revo_list, "data-label", /*dataLabel*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, revo_list, anchor);

			if (default_slot) {
				default_slot.m(revo_list, null);
			}

			/*revo_list_binding*/ ctx[10](revo_list);
			current = true;

			if (!mounted) {
				dispose = listen(revo_list, "doChange", /*onEvent*/ ctx[3]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 256) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[8], dirty, null, null);
				}
			}

			if (!current || dirty & /*isFocused*/ 1) {
				set_custom_element_data(revo_list, "is-focused", /*isFocused*/ ctx[0]);
			}

			if (!current || dirty & /*dataLabel*/ 2) {
				set_custom_element_data(revo_list, "data-label", /*dataLabel*/ ctx[1]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(revo_list);
			if (default_slot) default_slot.d(detaching);
			/*revo_list_binding*/ ctx[10](null);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { sourceItems = undefined } = $$props;
	let { isFocused = undefined } = $$props;
	let { dataLabel = undefined } = $$props;
	const refresh = (...args) => __ref.refresh(...args);
	const getWebComponent = () => __ref;

	onMount(() => {
		$$invalidate(7, __mounted = true);
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(2, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function revo_list_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			__ref = $$value;
			$$invalidate(2, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ("sourceItems" in $$props) $$invalidate(4, sourceItems = $$props.sourceItems);
		if ("isFocused" in $$props) $$invalidate(0, isFocused = $$props.isFocused);
		if ("dataLabel" in $$props) $$invalidate(1, dataLabel = $$props.dataLabel);
		if ("$$scope" in $$props) $$invalidate(8, $$scope = $$props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*__mounted, sourceItems*/ 144) {
			$: if (__mounted) setProp("sourceItems", sourceItems);
		}
	};

	return [
		isFocused,
		dataLabel,
		__ref,
		onEvent,
		sourceItems,
		refresh,
		getWebComponent,
		__mounted,
		$$scope,
		slots,
		revo_list_binding
	];
}

class RevoList extends SvelteComponent {
  $$prop_def: RevoListProps;
  $$events_def: RevoListEvents;
  $$slot_def: RevoListSlots;

  $on<K extends keyof RevoListEvents>(type: K, callback: (e: RevoListEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<RevoListProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			sourceItems: 4,
			isFocused: 0,
			dataLabel: 1,
			refresh: 5,
			getWebComponent: 6
		});
	}

	
  /**  */
 get refresh(): Components.RevoList["refresh"] {
		return this.$$.ctx[5];
	}

	get getWebComponent(): HTMLRevoListElement | undefined {
		return this.$$.ctx[6];
	}
}

export default RevoList;